/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package control;

import Boundary.TeamManagementUI;
import adt.ListInterface;
import entity.Course;
import entity.Programme;
import entity.Student;
import entity.Team;
import entity.TutorialGroup;
import init.DataInitializer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.Scanner;

/**
 *
 * @author OSCAR KOH YUNG QIN
 */
public class TeamSummary2 {

    public void start() {

        ListInterface<Programme> programmeList = ManageProgramme.getProgrammeList();
        ListInterface<Team> teamList = ManageTutorialTeam.getTeamList();
        ListInterface<Student> memberList = ManageStudentTeam.getTeamMembers();
        //ListInterface<Student> studentList = ManageTutorialGroup.getStudentList();
        ListInterface<Student> studentList = ManageStudent.getStudentList();

        Scanner scanner = new Scanner(System.in);
        Programme program = TeamManagementUI.selectProgram(scanner, programmeList);
        System.out.println("Will you like to view group with no teams? (yes/ no): ");
        String ans = scanner.nextLine();

        if ("YES".equalsIgnoreCase(ans)) {
            System.out.println("Will you like to view team with no student? (yes/ no): ");
            String ans2 = scanner.nextLine();
            displayTitle(program);
            displaySummaryDetails(ans, program, ans2, studentList);
        } else {
            displayTitle(program);
            displaySummaryDetails(ans, program, "NO", studentList); // Assuming "NO" by default for the second question
        }
    }

    public void displayTitle(Programme program) {
        System.out.println("========================================================================");
        System.out.println("\tTUNKU ABDUL RAHMAN UNIVERSITY OF MANAGEMENT AND TECHNOLOGY");
        System.out.println("\tASSIGNMENT TEAM MANAGEMENT SUBSYSTEM");
        System.out.println("========================================================================\n");
        System.out.println("\t\tSTUDENST SUMMARY REPORT FOR " + program.getProgrammeName() + "\n");
        displayCurrentDateTime();
    }

    private void displayCurrentDateTime() {
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, dd-MM-yyyy HH:mm:ss");
        String formattedDateTime = currentDateTime.format(formatter);

        // Get the day of the week in the default locale
        String dayOfWeek = currentDateTime.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault());

        System.out.println("Generated By: " + formattedDateTime + "\n");
    }

    public void displaySummaryDetails(String ans, Programme program, String ans2, ListInterface<Student> studentList) {
        //System.out.println("Total number of student for " + program.getProgrammeName() + " : " + getProgramStudent(studentList, program));

        // List group
        for (int i = 0; i < program.getGroupLists().size(); i++) {
            TutorialGroup group = program.getGroupLists().get(i);
            boolean hasTeams = !group.getTeamLists().isEmpty();
            if ("NO".equalsIgnoreCase(ans) && !hasTeams) {
                continue; // Skip this group if ans is "NO" and it has no teams
            }

            System.out.println("Tutorial Group: " + group.getGroupId());
            // List Course
            for (int k = 0; k < program.getCourseList().size(); k++) {
                int totalStudent = 0;
                int totalTeam = 0;
                Course course = program.getCourseList().get(k);
                System.out.println("\nCourse: " + course.getCode() + "\t\tMax Team Size: " + course.getTeamSize());
                // List Team
                int countStudent = 0; // Reset countStudent for each course
                for (int p = 0; p < group.getTeamLists().size(); p++) {
                    Team team = group.getTeamLists().get(p);
                    if (team.getCourse().getCode().equals(course.getCode())) {
                        if ("YES".equalsIgnoreCase(ans2) && team.getTeamMembers().isEmpty()) {
                            continue; // Skip this team if ans2 is "YES" and it has no students
                        }
                        totalTeam++;
                        System.out.println("\nTeam " + team.getTeamId());
                        countStudent = 0; // Reset countStudent for each team
                        // List Students
                        for (int z = 0; z < team.getTeamMembers().size(); z++) {
                            Student student = team.getTeamMembers().get(z);
                            System.out.println("Student ID: " + student.getStudentID() + "\tStudent Name: " + student.getName());
                            countStudent++;
                            totalStudent += countStudent;
                        }
                        int spaceLeft = course.getTeamSize() - countStudent;
                        System.out.println("Space left: " + (spaceLeft >= 0 ? spaceLeft : 0)); // Ensure space left is non-negative
                    }
                }
                System.out.println("\nTotal team: " + totalTeam + "\n");
            }
        }
        displayTeamWithHighestNumberOfStudents(program);
    }

    public void displayTeamWithHighestNumberOfStudents(Programme program) {
        for (int i = 0; i < program.getCourseList().size(); i++) {
            Course course = program.getCourseList().get(i);

            int maxNumOfStudents = 0;
            Team teamWithMaxStudents = null;
            for (int j = 0; j < program.getGroupLists().size(); j++) {
                TutorialGroup group = program.getGroupLists().get(j);
                for (int k = 0; k < group.getTeamLists().size(); k++) {
                    Team team = group.getTeamLists().get(k);
                    //If the team have the same course 
                    if (team.getCourse().equals(course)) {
                        if (team.getTeamMembers().size() > maxNumOfStudents) {
                            maxNumOfStudents = team.getTeamMembers().size();
                            teamWithMaxStudents = team;
                        }
                    }
                }
            }
            System.out.println("Team with the highest number of students for " + course.getName() + " : " + teamWithMaxStudents.getTeamId()
                    + " (" + teamWithMaxStudents.getTutorialGroup().getGroupId() + ") (" + maxNumOfStudents + ")");

        }
    }

    public int getTotalStudent(ListInterface<Student> studentList, TutorialGroup group) {
        int total = 0;
        for (int i = 0; i < studentList.size(); i++) {
            Student student = studentList.get(i);
            if (student.getGroup().equals(group)) {
                total++;
            }
        }

        return total;
    }
}
